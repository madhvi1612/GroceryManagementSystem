//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.9179
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GroceryManagementSystem {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : global::System.Data.DataSet {
        
        private categoryTblDataTable tablecategoryTbl;
        
        private CustomersTblDataTable tableCustomersTbl;
        
        private ProductsTblDataTable tableProductsTbl;
        
        private PurchasesTblDataTable tablePurchasesTbl;
        
        private RegTBLDataTable tableRegTBL;
        
        private SalesTblDataTable tableSalesTbl;
        
        private SuppliersTblDataTable tableSuppliersTbl;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["categoryTbl"] != null)) {
                    base.Tables.Add(new categoryTblDataTable(ds.Tables["categoryTbl"]));
                }
                if ((ds.Tables["CustomersTbl"] != null)) {
                    base.Tables.Add(new CustomersTblDataTable(ds.Tables["CustomersTbl"]));
                }
                if ((ds.Tables["ProductsTbl"] != null)) {
                    base.Tables.Add(new ProductsTblDataTable(ds.Tables["ProductsTbl"]));
                }
                if ((ds.Tables["PurchasesTbl"] != null)) {
                    base.Tables.Add(new PurchasesTblDataTable(ds.Tables["PurchasesTbl"]));
                }
                if ((ds.Tables["RegTBL"] != null)) {
                    base.Tables.Add(new RegTBLDataTable(ds.Tables["RegTBL"]));
                }
                if ((ds.Tables["SalesTbl"] != null)) {
                    base.Tables.Add(new SalesTblDataTable(ds.Tables["SalesTbl"]));
                }
                if ((ds.Tables["SuppliersTbl"] != null)) {
                    base.Tables.Add(new SuppliersTblDataTable(ds.Tables["SuppliersTbl"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public categoryTblDataTable categoryTbl {
            get {
                return this.tablecategoryTbl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomersTblDataTable CustomersTbl {
            get {
                return this.tableCustomersTbl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductsTblDataTable ProductsTbl {
            get {
                return this.tableProductsTbl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PurchasesTblDataTable PurchasesTbl {
            get {
                return this.tablePurchasesTbl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RegTBLDataTable RegTBL {
            get {
                return this.tableRegTBL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SalesTblDataTable SalesTbl {
            get {
                return this.tableSalesTbl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SuppliersTblDataTable SuppliersTbl {
            get {
                return this.tableSuppliersTbl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["categoryTbl"] != null)) {
                    base.Tables.Add(new categoryTblDataTable(ds.Tables["categoryTbl"]));
                }
                if ((ds.Tables["CustomersTbl"] != null)) {
                    base.Tables.Add(new CustomersTblDataTable(ds.Tables["CustomersTbl"]));
                }
                if ((ds.Tables["ProductsTbl"] != null)) {
                    base.Tables.Add(new ProductsTblDataTable(ds.Tables["ProductsTbl"]));
                }
                if ((ds.Tables["PurchasesTbl"] != null)) {
                    base.Tables.Add(new PurchasesTblDataTable(ds.Tables["PurchasesTbl"]));
                }
                if ((ds.Tables["RegTBL"] != null)) {
                    base.Tables.Add(new RegTBLDataTable(ds.Tables["RegTBL"]));
                }
                if ((ds.Tables["SalesTbl"] != null)) {
                    base.Tables.Add(new SalesTblDataTable(ds.Tables["SalesTbl"]));
                }
                if ((ds.Tables["SuppliersTbl"] != null)) {
                    base.Tables.Add(new SuppliersTblDataTable(ds.Tables["SuppliersTbl"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablecategoryTbl = ((categoryTblDataTable)(base.Tables["categoryTbl"]));
            if ((initTable == true)) {
                if ((this.tablecategoryTbl != null)) {
                    this.tablecategoryTbl.InitVars();
                }
            }
            this.tableCustomersTbl = ((CustomersTblDataTable)(base.Tables["CustomersTbl"]));
            if ((initTable == true)) {
                if ((this.tableCustomersTbl != null)) {
                    this.tableCustomersTbl.InitVars();
                }
            }
            this.tableProductsTbl = ((ProductsTblDataTable)(base.Tables["ProductsTbl"]));
            if ((initTable == true)) {
                if ((this.tableProductsTbl != null)) {
                    this.tableProductsTbl.InitVars();
                }
            }
            this.tablePurchasesTbl = ((PurchasesTblDataTable)(base.Tables["PurchasesTbl"]));
            if ((initTable == true)) {
                if ((this.tablePurchasesTbl != null)) {
                    this.tablePurchasesTbl.InitVars();
                }
            }
            this.tableRegTBL = ((RegTBLDataTable)(base.Tables["RegTBL"]));
            if ((initTable == true)) {
                if ((this.tableRegTBL != null)) {
                    this.tableRegTBL.InitVars();
                }
            }
            this.tableSalesTbl = ((SalesTblDataTable)(base.Tables["SalesTbl"]));
            if ((initTable == true)) {
                if ((this.tableSalesTbl != null)) {
                    this.tableSalesTbl.InitVars();
                }
            }
            this.tableSuppliersTbl = ((SuppliersTblDataTable)(base.Tables["SuppliersTbl"]));
            if ((initTable == true)) {
                if ((this.tableSuppliersTbl != null)) {
                    this.tableSuppliersTbl.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablecategoryTbl = new categoryTblDataTable();
            base.Tables.Add(this.tablecategoryTbl);
            this.tableCustomersTbl = new CustomersTblDataTable();
            base.Tables.Add(this.tableCustomersTbl);
            this.tableProductsTbl = new ProductsTblDataTable();
            base.Tables.Add(this.tableProductsTbl);
            this.tablePurchasesTbl = new PurchasesTblDataTable();
            base.Tables.Add(this.tablePurchasesTbl);
            this.tableRegTBL = new RegTBLDataTable();
            base.Tables.Add(this.tableRegTBL);
            this.tableSalesTbl = new SalesTblDataTable();
            base.Tables.Add(this.tableSalesTbl);
            this.tableSuppliersTbl = new SuppliersTblDataTable();
            base.Tables.Add(this.tableSuppliersTbl);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecategoryTbl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomersTbl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProductsTbl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePurchasesTbl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRegTBL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSalesTbl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSuppliersTbl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void categoryTblRowChangeEventHandler(object sender, categoryTblRowChangeEvent e);
        
        public delegate void CustomersTblRowChangeEventHandler(object sender, CustomersTblRowChangeEvent e);
        
        public delegate void ProductsTblRowChangeEventHandler(object sender, ProductsTblRowChangeEvent e);
        
        public delegate void PurchasesTblRowChangeEventHandler(object sender, PurchasesTblRowChangeEvent e);
        
        public delegate void RegTBLRowChangeEventHandler(object sender, RegTBLRowChangeEvent e);
        
        public delegate void SalesTblRowChangeEventHandler(object sender, SalesTblRowChangeEvent e);
        
        public delegate void SuppliersTblRowChangeEventHandler(object sender, SuppliersTblRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class categoryTblDataTable : global::System.Data.TypedTableBase<categoryTblRow> {
            
            private global::System.Data.DataColumn columncat_id;
            
            private global::System.Data.DataColumn columncat_name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public categoryTblDataTable() {
                this.TableName = "categoryTbl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal categoryTblDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected categoryTblDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cat_idColumn {
                get {
                    return this.columncat_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cat_nameColumn {
                get {
                    return this.columncat_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public categoryTblRow this[int index] {
                get {
                    return ((categoryTblRow)(this.Rows[index]));
                }
            }
            
            public event categoryTblRowChangeEventHandler categoryTblRowChanging;
            
            public event categoryTblRowChangeEventHandler categoryTblRowChanged;
            
            public event categoryTblRowChangeEventHandler categoryTblRowDeleting;
            
            public event categoryTblRowChangeEventHandler categoryTblRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcategoryTblRow(categoryTblRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public categoryTblRow AddcategoryTblRow(string cat_name) {
                categoryTblRow rowcategoryTblRow = ((categoryTblRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        cat_name};
                rowcategoryTblRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcategoryTblRow);
                return rowcategoryTblRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public categoryTblRow FindBycat_id(int cat_id) {
                return ((categoryTblRow)(this.Rows.Find(new object[] {
                            cat_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                categoryTblDataTable cln = ((categoryTblDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new categoryTblDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncat_id = base.Columns["cat_id"];
                this.columncat_name = base.Columns["cat_name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncat_id = new global::System.Data.DataColumn("cat_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncat_id);
                this.columncat_name = new global::System.Data.DataColumn("cat_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncat_name);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columncat_id}, true));
                this.columncat_id.AutoIncrement = true;
                this.columncat_id.AutoIncrementSeed = -1;
                this.columncat_id.AutoIncrementStep = -1;
                this.columncat_id.AllowDBNull = false;
                this.columncat_id.ReadOnly = true;
                this.columncat_id.Unique = true;
                this.columncat_name.AllowDBNull = false;
                this.columncat_name.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public categoryTblRow NewcategoryTblRow() {
                return ((categoryTblRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new categoryTblRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(categoryTblRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.categoryTblRowChanged != null)) {
                    this.categoryTblRowChanged(this, new categoryTblRowChangeEvent(((categoryTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.categoryTblRowChanging != null)) {
                    this.categoryTblRowChanging(this, new categoryTblRowChangeEvent(((categoryTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.categoryTblRowDeleted != null)) {
                    this.categoryTblRowDeleted(this, new categoryTblRowChangeEvent(((categoryTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.categoryTblRowDeleting != null)) {
                    this.categoryTblRowDeleting(this, new categoryTblRowChangeEvent(((categoryTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecategoryTblRow(categoryTblRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "categoryTblDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomersTblDataTable : global::System.Data.TypedTableBase<CustomersTblRow> {
            
            private global::System.Data.DataColumn columnC_id;
            
            private global::System.Data.DataColumn columnC_name;
            
            private global::System.Data.DataColumn columnC_phone;
            
            private global::System.Data.DataColumn columnC_email;
            
            private global::System.Data.DataColumn columnC_address;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomersTblDataTable() {
                this.TableName = "CustomersTbl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomersTblDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomersTblDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_idColumn {
                get {
                    return this.columnC_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_nameColumn {
                get {
                    return this.columnC_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_phoneColumn {
                get {
                    return this.columnC_phone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_emailColumn {
                get {
                    return this.columnC_email;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_addressColumn {
                get {
                    return this.columnC_address;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomersTblRow this[int index] {
                get {
                    return ((CustomersTblRow)(this.Rows[index]));
                }
            }
            
            public event CustomersTblRowChangeEventHandler CustomersTblRowChanging;
            
            public event CustomersTblRowChangeEventHandler CustomersTblRowChanged;
            
            public event CustomersTblRowChangeEventHandler CustomersTblRowDeleting;
            
            public event CustomersTblRowChangeEventHandler CustomersTblRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomersTblRow(CustomersTblRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomersTblRow AddCustomersTblRow(string C_name, string C_phone, string C_email, string C_address) {
                CustomersTblRow rowCustomersTblRow = ((CustomersTblRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        C_name,
                        C_phone,
                        C_email,
                        C_address};
                rowCustomersTblRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCustomersTblRow);
                return rowCustomersTblRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomersTblRow FindByC_id(int C_id) {
                return ((CustomersTblRow)(this.Rows.Find(new object[] {
                            C_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CustomersTblDataTable cln = ((CustomersTblDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CustomersTblDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnC_id = base.Columns["C_id"];
                this.columnC_name = base.Columns["C_name"];
                this.columnC_phone = base.Columns["C_phone"];
                this.columnC_email = base.Columns["C_email"];
                this.columnC_address = base.Columns["C_address"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnC_id = new global::System.Data.DataColumn("C_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_id);
                this.columnC_name = new global::System.Data.DataColumn("C_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_name);
                this.columnC_phone = new global::System.Data.DataColumn("C_phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_phone);
                this.columnC_email = new global::System.Data.DataColumn("C_email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_email);
                this.columnC_address = new global::System.Data.DataColumn("C_address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_address);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnC_id}, true));
                this.columnC_id.AutoIncrement = true;
                this.columnC_id.AutoIncrementSeed = -1;
                this.columnC_id.AutoIncrementStep = -1;
                this.columnC_id.AllowDBNull = false;
                this.columnC_id.ReadOnly = true;
                this.columnC_id.Unique = true;
                this.columnC_name.AllowDBNull = false;
                this.columnC_name.MaxLength = 50;
                this.columnC_phone.AllowDBNull = false;
                this.columnC_phone.MaxLength = 50;
                this.columnC_email.AllowDBNull = false;
                this.columnC_email.MaxLength = 50;
                this.columnC_address.AllowDBNull = false;
                this.columnC_address.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomersTblRow NewCustomersTblRow() {
                return ((CustomersTblRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CustomersTblRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CustomersTblRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomersTblRowChanged != null)) {
                    this.CustomersTblRowChanged(this, new CustomersTblRowChangeEvent(((CustomersTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomersTblRowChanging != null)) {
                    this.CustomersTblRowChanging(this, new CustomersTblRowChangeEvent(((CustomersTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomersTblRowDeleted != null)) {
                    this.CustomersTblRowDeleted(this, new CustomersTblRowChangeEvent(((CustomersTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomersTblRowDeleting != null)) {
                    this.CustomersTblRowDeleting(this, new CustomersTblRowChangeEvent(((CustomersTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomersTblRow(CustomersTblRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomersTblDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductsTblDataTable : global::System.Data.TypedTableBase<ProductsTblRow> {
            
            private global::System.Data.DataColumn columnPro_id;
            
            private global::System.Data.DataColumn columnPro_name;
            
            private global::System.Data.DataColumn columnPro_category;
            
            private global::System.Data.DataColumn columnPro_cost;
            
            private global::System.Data.DataColumn columnPro_price;
            
            private global::System.Data.DataColumn columnPro_qty;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductsTblDataTable() {
                this.TableName = "ProductsTbl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductsTblDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProductsTblDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pro_idColumn {
                get {
                    return this.columnPro_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pro_nameColumn {
                get {
                    return this.columnPro_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pro_categoryColumn {
                get {
                    return this.columnPro_category;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pro_costColumn {
                get {
                    return this.columnPro_cost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pro_priceColumn {
                get {
                    return this.columnPro_price;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pro_qtyColumn {
                get {
                    return this.columnPro_qty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductsTblRow this[int index] {
                get {
                    return ((ProductsTblRow)(this.Rows[index]));
                }
            }
            
            public event ProductsTblRowChangeEventHandler ProductsTblRowChanging;
            
            public event ProductsTblRowChangeEventHandler ProductsTblRowChanged;
            
            public event ProductsTblRowChangeEventHandler ProductsTblRowDeleting;
            
            public event ProductsTblRowChangeEventHandler ProductsTblRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProductsTblRow(ProductsTblRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductsTblRow AddProductsTblRow(string Pro_name, string Pro_category, double Pro_cost, double Pro_price, int Pro_qty) {
                ProductsTblRow rowProductsTblRow = ((ProductsTblRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Pro_name,
                        Pro_category,
                        Pro_cost,
                        Pro_price,
                        Pro_qty};
                rowProductsTblRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProductsTblRow);
                return rowProductsTblRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductsTblRow FindByPro_id(int Pro_id) {
                return ((ProductsTblRow)(this.Rows.Find(new object[] {
                            Pro_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProductsTblDataTable cln = ((ProductsTblDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProductsTblDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPro_id = base.Columns["Pro_id"];
                this.columnPro_name = base.Columns["Pro_name"];
                this.columnPro_category = base.Columns["Pro_category"];
                this.columnPro_cost = base.Columns["Pro_cost"];
                this.columnPro_price = base.Columns["Pro_price"];
                this.columnPro_qty = base.Columns["Pro_qty"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPro_id = new global::System.Data.DataColumn("Pro_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPro_id);
                this.columnPro_name = new global::System.Data.DataColumn("Pro_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPro_name);
                this.columnPro_category = new global::System.Data.DataColumn("Pro_category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPro_category);
                this.columnPro_cost = new global::System.Data.DataColumn("Pro_cost", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPro_cost);
                this.columnPro_price = new global::System.Data.DataColumn("Pro_price", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPro_price);
                this.columnPro_qty = new global::System.Data.DataColumn("Pro_qty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPro_qty);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPro_id}, true));
                this.columnPro_id.AutoIncrement = true;
                this.columnPro_id.AutoIncrementSeed = -1;
                this.columnPro_id.AutoIncrementStep = -1;
                this.columnPro_id.AllowDBNull = false;
                this.columnPro_id.ReadOnly = true;
                this.columnPro_id.Unique = true;
                this.columnPro_name.AllowDBNull = false;
                this.columnPro_name.MaxLength = 50;
                this.columnPro_category.AllowDBNull = false;
                this.columnPro_category.MaxLength = 50;
                this.columnPro_cost.AllowDBNull = false;
                this.columnPro_price.AllowDBNull = false;
                this.columnPro_qty.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductsTblRow NewProductsTblRow() {
                return ((ProductsTblRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProductsTblRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProductsTblRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductsTblRowChanged != null)) {
                    this.ProductsTblRowChanged(this, new ProductsTblRowChangeEvent(((ProductsTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductsTblRowChanging != null)) {
                    this.ProductsTblRowChanging(this, new ProductsTblRowChangeEvent(((ProductsTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductsTblRowDeleted != null)) {
                    this.ProductsTblRowDeleted(this, new ProductsTblRowChangeEvent(((ProductsTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductsTblRowDeleting != null)) {
                    this.ProductsTblRowDeleting(this, new ProductsTblRowChangeEvent(((ProductsTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProductsTblRow(ProductsTblRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductsTblDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PurchasesTblDataTable : global::System.Data.TypedTableBase<PurchasesTblRow> {
            
            private global::System.Data.DataColumn columnPur_id;
            
            private global::System.Data.DataColumn columnPur_date;
            
            private global::System.Data.DataColumn columnPur_supplier;
            
            private global::System.Data.DataColumn columnPur_pro;
            
            private global::System.Data.DataColumn columnPur_qty;
            
            private global::System.Data.DataColumn columnPur_cost;
            
            private global::System.Data.DataColumn columnPur_amount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PurchasesTblDataTable() {
                this.TableName = "PurchasesTbl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PurchasesTblDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PurchasesTblDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pur_idColumn {
                get {
                    return this.columnPur_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pur_dateColumn {
                get {
                    return this.columnPur_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pur_supplierColumn {
                get {
                    return this.columnPur_supplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pur_proColumn {
                get {
                    return this.columnPur_pro;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pur_qtyColumn {
                get {
                    return this.columnPur_qty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pur_costColumn {
                get {
                    return this.columnPur_cost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pur_amountColumn {
                get {
                    return this.columnPur_amount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PurchasesTblRow this[int index] {
                get {
                    return ((PurchasesTblRow)(this.Rows[index]));
                }
            }
            
            public event PurchasesTblRowChangeEventHandler PurchasesTblRowChanging;
            
            public event PurchasesTblRowChangeEventHandler PurchasesTblRowChanged;
            
            public event PurchasesTblRowChangeEventHandler PurchasesTblRowDeleting;
            
            public event PurchasesTblRowChangeEventHandler PurchasesTblRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPurchasesTblRow(PurchasesTblRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PurchasesTblRow AddPurchasesTblRow(string Pur_date, string Pur_supplier, string Pur_pro, int Pur_qty, double Pur_cost, double Pur_amount) {
                PurchasesTblRow rowPurchasesTblRow = ((PurchasesTblRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Pur_date,
                        Pur_supplier,
                        Pur_pro,
                        Pur_qty,
                        Pur_cost,
                        Pur_amount};
                rowPurchasesTblRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPurchasesTblRow);
                return rowPurchasesTblRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PurchasesTblRow FindByPur_id(int Pur_id) {
                return ((PurchasesTblRow)(this.Rows.Find(new object[] {
                            Pur_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PurchasesTblDataTable cln = ((PurchasesTblDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PurchasesTblDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPur_id = base.Columns["Pur_id"];
                this.columnPur_date = base.Columns["Pur_date"];
                this.columnPur_supplier = base.Columns["Pur_supplier"];
                this.columnPur_pro = base.Columns["Pur_pro"];
                this.columnPur_qty = base.Columns["Pur_qty"];
                this.columnPur_cost = base.Columns["Pur_cost"];
                this.columnPur_amount = base.Columns["Pur_amount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPur_id = new global::System.Data.DataColumn("Pur_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPur_id);
                this.columnPur_date = new global::System.Data.DataColumn("Pur_date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPur_date);
                this.columnPur_supplier = new global::System.Data.DataColumn("Pur_supplier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPur_supplier);
                this.columnPur_pro = new global::System.Data.DataColumn("Pur_pro", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPur_pro);
                this.columnPur_qty = new global::System.Data.DataColumn("Pur_qty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPur_qty);
                this.columnPur_cost = new global::System.Data.DataColumn("Pur_cost", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPur_cost);
                this.columnPur_amount = new global::System.Data.DataColumn("Pur_amount", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPur_amount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPur_id}, true));
                this.columnPur_id.AutoIncrement = true;
                this.columnPur_id.AutoIncrementSeed = -1;
                this.columnPur_id.AutoIncrementStep = -1;
                this.columnPur_id.AllowDBNull = false;
                this.columnPur_id.ReadOnly = true;
                this.columnPur_id.Unique = true;
                this.columnPur_date.AllowDBNull = false;
                this.columnPur_date.MaxLength = 50;
                this.columnPur_supplier.AllowDBNull = false;
                this.columnPur_supplier.MaxLength = 50;
                this.columnPur_pro.AllowDBNull = false;
                this.columnPur_pro.MaxLength = 50;
                this.columnPur_qty.AllowDBNull = false;
                this.columnPur_cost.AllowDBNull = false;
                this.columnPur_amount.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PurchasesTblRow NewPurchasesTblRow() {
                return ((PurchasesTblRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PurchasesTblRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PurchasesTblRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PurchasesTblRowChanged != null)) {
                    this.PurchasesTblRowChanged(this, new PurchasesTblRowChangeEvent(((PurchasesTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PurchasesTblRowChanging != null)) {
                    this.PurchasesTblRowChanging(this, new PurchasesTblRowChangeEvent(((PurchasesTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PurchasesTblRowDeleted != null)) {
                    this.PurchasesTblRowDeleted(this, new PurchasesTblRowChangeEvent(((PurchasesTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PurchasesTblRowDeleting != null)) {
                    this.PurchasesTblRowDeleting(this, new PurchasesTblRowChangeEvent(((PurchasesTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePurchasesTblRow(PurchasesTblRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PurchasesTblDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RegTBLDataTable : global::System.Data.TypedTableBase<RegTBLRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnPassword;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnFullName;
            
            private global::System.Data.DataColumn columnNo;
            
            private global::System.Data.DataColumn columnDOB;
            
            private global::System.Data.DataColumn columnRegDate;
            
            private global::System.Data.DataColumn columnQuestion;
            
            private global::System.Data.DataColumn columnAnswer;
            
            private global::System.Data.DataColumn columnImage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegTBLDataTable() {
                this.TableName = "RegTBL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RegTBLDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RegTBLDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoColumn {
                get {
                    return this.columnNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOBColumn {
                get {
                    return this.columnDOB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegDateColumn {
                get {
                    return this.columnRegDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuestionColumn {
                get {
                    return this.columnQuestion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AnswerColumn {
                get {
                    return this.columnAnswer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageColumn {
                get {
                    return this.columnImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegTBLRow this[int index] {
                get {
                    return ((RegTBLRow)(this.Rows[index]));
                }
            }
            
            public event RegTBLRowChangeEventHandler RegTBLRowChanging;
            
            public event RegTBLRowChangeEventHandler RegTBLRowChanged;
            
            public event RegTBLRowChangeEventHandler RegTBLRowDeleting;
            
            public event RegTBLRowChangeEventHandler RegTBLRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRegTBLRow(RegTBLRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegTBLRow AddRegTBLRow(int id, string UserName, string Password, string Email, string FullName, string No, string DOB, string RegDate, string Question, string Answer, byte[] Image) {
                RegTBLRow rowRegTBLRow = ((RegTBLRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        UserName,
                        Password,
                        Email,
                        FullName,
                        No,
                        DOB,
                        RegDate,
                        Question,
                        Answer,
                        Image};
                rowRegTBLRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRegTBLRow);
                return rowRegTBLRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegTBLRow FindByid(int id) {
                return ((RegTBLRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RegTBLDataTable cln = ((RegTBLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RegTBLDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnUserName = base.Columns["UserName"];
                this.columnPassword = base.Columns["Password"];
                this.columnEmail = base.Columns["Email"];
                this.columnFullName = base.Columns["FullName"];
                this.columnNo = base.Columns["No"];
                this.columnDOB = base.Columns["DOB"];
                this.columnRegDate = base.Columns["RegDate"];
                this.columnQuestion = base.Columns["Question"];
                this.columnAnswer = base.Columns["Answer"];
                this.columnImage = base.Columns["Image"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnFullName = new global::System.Data.DataColumn("FullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnNo = new global::System.Data.DataColumn("No", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo);
                this.columnDOB = new global::System.Data.DataColumn("DOB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOB);
                this.columnRegDate = new global::System.Data.DataColumn("RegDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegDate);
                this.columnQuestion = new global::System.Data.DataColumn("Question", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestion);
                this.columnAnswer = new global::System.Data.DataColumn("Answer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnswer);
                this.columnImage = new global::System.Data.DataColumn("Image", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImage);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnUserName.AllowDBNull = false;
                this.columnUserName.MaxLength = 20;
                this.columnPassword.AllowDBNull = false;
                this.columnPassword.MaxLength = 50;
                this.columnEmail.AllowDBNull = false;
                this.columnEmail.MaxLength = 50;
                this.columnFullName.AllowDBNull = false;
                this.columnFullName.MaxLength = 50;
                this.columnNo.AllowDBNull = false;
                this.columnNo.MaxLength = 50;
                this.columnDOB.AllowDBNull = false;
                this.columnDOB.MaxLength = 50;
                this.columnRegDate.AllowDBNull = false;
                this.columnRegDate.MaxLength = 50;
                this.columnQuestion.AllowDBNull = false;
                this.columnQuestion.MaxLength = 50;
                this.columnAnswer.AllowDBNull = false;
                this.columnAnswer.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegTBLRow NewRegTBLRow() {
                return ((RegTBLRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RegTBLRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RegTBLRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RegTBLRowChanged != null)) {
                    this.RegTBLRowChanged(this, new RegTBLRowChangeEvent(((RegTBLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RegTBLRowChanging != null)) {
                    this.RegTBLRowChanging(this, new RegTBLRowChangeEvent(((RegTBLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RegTBLRowDeleted != null)) {
                    this.RegTBLRowDeleted(this, new RegTBLRowChangeEvent(((RegTBLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RegTBLRowDeleting != null)) {
                    this.RegTBLRowDeleting(this, new RegTBLRowChangeEvent(((RegTBLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRegTBLRow(RegTBLRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RegTBLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SalesTblDataTable : global::System.Data.TypedTableBase<SalesTblRow> {
            
            private global::System.Data.DataColumn columnSal_id;
            
            private global::System.Data.DataColumn columnSal_date;
            
            private global::System.Data.DataColumn columnSal_customer;
            
            private global::System.Data.DataColumn columnSal_Pro_id;
            
            private global::System.Data.DataColumn columnSal_name;
            
            private global::System.Data.DataColumn columnSal_qty;
            
            private global::System.Data.DataColumn columnSal_price;
            
            private global::System.Data.DataColumn columnSal_total;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesTblDataTable() {
                this.TableName = "SalesTbl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SalesTblDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SalesTblDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sal_idColumn {
                get {
                    return this.columnSal_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sal_dateColumn {
                get {
                    return this.columnSal_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sal_customerColumn {
                get {
                    return this.columnSal_customer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sal_Pro_idColumn {
                get {
                    return this.columnSal_Pro_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sal_nameColumn {
                get {
                    return this.columnSal_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sal_qtyColumn {
                get {
                    return this.columnSal_qty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sal_priceColumn {
                get {
                    return this.columnSal_price;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sal_totalColumn {
                get {
                    return this.columnSal_total;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesTblRow this[int index] {
                get {
                    return ((SalesTblRow)(this.Rows[index]));
                }
            }
            
            public event SalesTblRowChangeEventHandler SalesTblRowChanging;
            
            public event SalesTblRowChangeEventHandler SalesTblRowChanged;
            
            public event SalesTblRowChangeEventHandler SalesTblRowDeleting;
            
            public event SalesTblRowChangeEventHandler SalesTblRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSalesTblRow(SalesTblRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesTblRow AddSalesTblRow(string Sal_date, string Sal_customer, int Sal_Pro_id, string Sal_name, string Sal_qty, string Sal_price, string Sal_total) {
                SalesTblRow rowSalesTblRow = ((SalesTblRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Sal_date,
                        Sal_customer,
                        Sal_Pro_id,
                        Sal_name,
                        Sal_qty,
                        Sal_price,
                        Sal_total};
                rowSalesTblRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSalesTblRow);
                return rowSalesTblRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesTblRow FindBySal_id(int Sal_id) {
                return ((SalesTblRow)(this.Rows.Find(new object[] {
                            Sal_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SalesTblDataTable cln = ((SalesTblDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SalesTblDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSal_id = base.Columns["Sal_id"];
                this.columnSal_date = base.Columns["Sal_date"];
                this.columnSal_customer = base.Columns["Sal_customer"];
                this.columnSal_Pro_id = base.Columns["Sal_Pro_id"];
                this.columnSal_name = base.Columns["Sal_name"];
                this.columnSal_qty = base.Columns["Sal_qty"];
                this.columnSal_price = base.Columns["Sal_price"];
                this.columnSal_total = base.Columns["Sal_total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSal_id = new global::System.Data.DataColumn("Sal_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSal_id);
                this.columnSal_date = new global::System.Data.DataColumn("Sal_date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSal_date);
                this.columnSal_customer = new global::System.Data.DataColumn("Sal_customer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSal_customer);
                this.columnSal_Pro_id = new global::System.Data.DataColumn("Sal_Pro_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSal_Pro_id);
                this.columnSal_name = new global::System.Data.DataColumn("Sal_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSal_name);
                this.columnSal_qty = new global::System.Data.DataColumn("Sal_qty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSal_qty);
                this.columnSal_price = new global::System.Data.DataColumn("Sal_price", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSal_price);
                this.columnSal_total = new global::System.Data.DataColumn("Sal_total", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSal_total);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSal_id}, true));
                this.columnSal_id.AutoIncrement = true;
                this.columnSal_id.AutoIncrementSeed = -1;
                this.columnSal_id.AutoIncrementStep = -1;
                this.columnSal_id.AllowDBNull = false;
                this.columnSal_id.ReadOnly = true;
                this.columnSal_id.Unique = true;
                this.columnSal_date.AllowDBNull = false;
                this.columnSal_date.MaxLength = 50;
                this.columnSal_customer.AllowDBNull = false;
                this.columnSal_customer.MaxLength = 50;
                this.columnSal_Pro_id.AllowDBNull = false;
                this.columnSal_name.AllowDBNull = false;
                this.columnSal_name.MaxLength = 50;
                this.columnSal_qty.AllowDBNull = false;
                this.columnSal_qty.MaxLength = 50;
                this.columnSal_price.AllowDBNull = false;
                this.columnSal_price.MaxLength = 50;
                this.columnSal_total.AllowDBNull = false;
                this.columnSal_total.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesTblRow NewSalesTblRow() {
                return ((SalesTblRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SalesTblRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SalesTblRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SalesTblRowChanged != null)) {
                    this.SalesTblRowChanged(this, new SalesTblRowChangeEvent(((SalesTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SalesTblRowChanging != null)) {
                    this.SalesTblRowChanging(this, new SalesTblRowChangeEvent(((SalesTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SalesTblRowDeleted != null)) {
                    this.SalesTblRowDeleted(this, new SalesTblRowChangeEvent(((SalesTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SalesTblRowDeleting != null)) {
                    this.SalesTblRowDeleting(this, new SalesTblRowChangeEvent(((SalesTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSalesTblRow(SalesTblRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SalesTblDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SuppliersTblDataTable : global::System.Data.TypedTableBase<SuppliersTblRow> {
            
            private global::System.Data.DataColumn columnSpl_id;
            
            private global::System.Data.DataColumn columnSpl_name;
            
            private global::System.Data.DataColumn columnSpl_phone;
            
            private global::System.Data.DataColumn columnSpl_email;
            
            private global::System.Data.DataColumn columnSpl_address;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuppliersTblDataTable() {
                this.TableName = "SuppliersTbl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SuppliersTblDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SuppliersTblDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Spl_idColumn {
                get {
                    return this.columnSpl_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Spl_nameColumn {
                get {
                    return this.columnSpl_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Spl_phoneColumn {
                get {
                    return this.columnSpl_phone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Spl_emailColumn {
                get {
                    return this.columnSpl_email;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Spl_addressColumn {
                get {
                    return this.columnSpl_address;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuppliersTblRow this[int index] {
                get {
                    return ((SuppliersTblRow)(this.Rows[index]));
                }
            }
            
            public event SuppliersTblRowChangeEventHandler SuppliersTblRowChanging;
            
            public event SuppliersTblRowChangeEventHandler SuppliersTblRowChanged;
            
            public event SuppliersTblRowChangeEventHandler SuppliersTblRowDeleting;
            
            public event SuppliersTblRowChangeEventHandler SuppliersTblRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSuppliersTblRow(SuppliersTblRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuppliersTblRow AddSuppliersTblRow(string Spl_name, string Spl_phone, string Spl_email, string Spl_address) {
                SuppliersTblRow rowSuppliersTblRow = ((SuppliersTblRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Spl_name,
                        Spl_phone,
                        Spl_email,
                        Spl_address};
                rowSuppliersTblRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSuppliersTblRow);
                return rowSuppliersTblRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuppliersTblRow FindBySpl_id(int Spl_id) {
                return ((SuppliersTblRow)(this.Rows.Find(new object[] {
                            Spl_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SuppliersTblDataTable cln = ((SuppliersTblDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SuppliersTblDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSpl_id = base.Columns["Spl_id"];
                this.columnSpl_name = base.Columns["Spl_name"];
                this.columnSpl_phone = base.Columns["Spl_phone"];
                this.columnSpl_email = base.Columns["Spl_email"];
                this.columnSpl_address = base.Columns["Spl_address"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSpl_id = new global::System.Data.DataColumn("Spl_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpl_id);
                this.columnSpl_name = new global::System.Data.DataColumn("Spl_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpl_name);
                this.columnSpl_phone = new global::System.Data.DataColumn("Spl_phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpl_phone);
                this.columnSpl_email = new global::System.Data.DataColumn("Spl_email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpl_email);
                this.columnSpl_address = new global::System.Data.DataColumn("Spl_address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpl_address);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSpl_id}, true));
                this.columnSpl_id.AutoIncrement = true;
                this.columnSpl_id.AutoIncrementSeed = -1;
                this.columnSpl_id.AutoIncrementStep = -1;
                this.columnSpl_id.AllowDBNull = false;
                this.columnSpl_id.ReadOnly = true;
                this.columnSpl_id.Unique = true;
                this.columnSpl_name.AllowDBNull = false;
                this.columnSpl_name.MaxLength = 50;
                this.columnSpl_phone.AllowDBNull = false;
                this.columnSpl_phone.MaxLength = 50;
                this.columnSpl_email.AllowDBNull = false;
                this.columnSpl_email.MaxLength = 50;
                this.columnSpl_address.AllowDBNull = false;
                this.columnSpl_address.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuppliersTblRow NewSuppliersTblRow() {
                return ((SuppliersTblRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SuppliersTblRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SuppliersTblRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SuppliersTblRowChanged != null)) {
                    this.SuppliersTblRowChanged(this, new SuppliersTblRowChangeEvent(((SuppliersTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SuppliersTblRowChanging != null)) {
                    this.SuppliersTblRowChanging(this, new SuppliersTblRowChangeEvent(((SuppliersTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SuppliersTblRowDeleted != null)) {
                    this.SuppliersTblRowDeleted(this, new SuppliersTblRowChangeEvent(((SuppliersTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SuppliersTblRowDeleting != null)) {
                    this.SuppliersTblRowDeleting(this, new SuppliersTblRowChangeEvent(((SuppliersTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSuppliersTblRow(SuppliersTblRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SuppliersTblDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class categoryTblRow : global::System.Data.DataRow {
            
            private categoryTblDataTable tablecategoryTbl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal categoryTblRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecategoryTbl = ((categoryTblDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cat_id {
                get {
                    return ((int)(this[this.tablecategoryTbl.cat_idColumn]));
                }
                set {
                    this[this.tablecategoryTbl.cat_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cat_name {
                get {
                    return ((string)(this[this.tablecategoryTbl.cat_nameColumn]));
                }
                set {
                    this[this.tablecategoryTbl.cat_nameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomersTblRow : global::System.Data.DataRow {
            
            private CustomersTblDataTable tableCustomersTbl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomersTblRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomersTbl = ((CustomersTblDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int C_id {
                get {
                    return ((int)(this[this.tableCustomersTbl.C_idColumn]));
                }
                set {
                    this[this.tableCustomersTbl.C_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C_name {
                get {
                    return ((string)(this[this.tableCustomersTbl.C_nameColumn]));
                }
                set {
                    this[this.tableCustomersTbl.C_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C_phone {
                get {
                    return ((string)(this[this.tableCustomersTbl.C_phoneColumn]));
                }
                set {
                    this[this.tableCustomersTbl.C_phoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C_email {
                get {
                    return ((string)(this[this.tableCustomersTbl.C_emailColumn]));
                }
                set {
                    this[this.tableCustomersTbl.C_emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C_address {
                get {
                    return ((string)(this[this.tableCustomersTbl.C_addressColumn]));
                }
                set {
                    this[this.tableCustomersTbl.C_addressColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProductsTblRow : global::System.Data.DataRow {
            
            private ProductsTblDataTable tableProductsTbl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductsTblRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProductsTbl = ((ProductsTblDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Pro_id {
                get {
                    return ((int)(this[this.tableProductsTbl.Pro_idColumn]));
                }
                set {
                    this[this.tableProductsTbl.Pro_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Pro_name {
                get {
                    return ((string)(this[this.tableProductsTbl.Pro_nameColumn]));
                }
                set {
                    this[this.tableProductsTbl.Pro_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Pro_category {
                get {
                    return ((string)(this[this.tableProductsTbl.Pro_categoryColumn]));
                }
                set {
                    this[this.tableProductsTbl.Pro_categoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Pro_cost {
                get {
                    return ((double)(this[this.tableProductsTbl.Pro_costColumn]));
                }
                set {
                    this[this.tableProductsTbl.Pro_costColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Pro_price {
                get {
                    return ((double)(this[this.tableProductsTbl.Pro_priceColumn]));
                }
                set {
                    this[this.tableProductsTbl.Pro_priceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Pro_qty {
                get {
                    return ((int)(this[this.tableProductsTbl.Pro_qtyColumn]));
                }
                set {
                    this[this.tableProductsTbl.Pro_qtyColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PurchasesTblRow : global::System.Data.DataRow {
            
            private PurchasesTblDataTable tablePurchasesTbl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PurchasesTblRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePurchasesTbl = ((PurchasesTblDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Pur_id {
                get {
                    return ((int)(this[this.tablePurchasesTbl.Pur_idColumn]));
                }
                set {
                    this[this.tablePurchasesTbl.Pur_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Pur_date {
                get {
                    return ((string)(this[this.tablePurchasesTbl.Pur_dateColumn]));
                }
                set {
                    this[this.tablePurchasesTbl.Pur_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Pur_supplier {
                get {
                    return ((string)(this[this.tablePurchasesTbl.Pur_supplierColumn]));
                }
                set {
                    this[this.tablePurchasesTbl.Pur_supplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Pur_pro {
                get {
                    return ((string)(this[this.tablePurchasesTbl.Pur_proColumn]));
                }
                set {
                    this[this.tablePurchasesTbl.Pur_proColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Pur_qty {
                get {
                    return ((int)(this[this.tablePurchasesTbl.Pur_qtyColumn]));
                }
                set {
                    this[this.tablePurchasesTbl.Pur_qtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Pur_cost {
                get {
                    return ((double)(this[this.tablePurchasesTbl.Pur_costColumn]));
                }
                set {
                    this[this.tablePurchasesTbl.Pur_costColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Pur_amount {
                get {
                    return ((double)(this[this.tablePurchasesTbl.Pur_amountColumn]));
                }
                set {
                    this[this.tablePurchasesTbl.Pur_amountColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RegTBLRow : global::System.Data.DataRow {
            
            private RegTBLDataTable tableRegTBL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RegTBLRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRegTBL = ((RegTBLDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableRegTBL.idColumn]));
                }
                set {
                    this[this.tableRegTBL.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    return ((string)(this[this.tableRegTBL.UserNameColumn]));
                }
                set {
                    this[this.tableRegTBL.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    return ((string)(this[this.tableRegTBL.PasswordColumn]));
                }
                set {
                    this[this.tableRegTBL.PasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    return ((string)(this[this.tableRegTBL.EmailColumn]));
                }
                set {
                    this[this.tableRegTBL.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    return ((string)(this[this.tableRegTBL.FullNameColumn]));
                }
                set {
                    this[this.tableRegTBL.FullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string No {
                get {
                    return ((string)(this[this.tableRegTBL.NoColumn]));
                }
                set {
                    this[this.tableRegTBL.NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOB {
                get {
                    return ((string)(this[this.tableRegTBL.DOBColumn]));
                }
                set {
                    this[this.tableRegTBL.DOBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RegDate {
                get {
                    return ((string)(this[this.tableRegTBL.RegDateColumn]));
                }
                set {
                    this[this.tableRegTBL.RegDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Question {
                get {
                    return ((string)(this[this.tableRegTBL.QuestionColumn]));
                }
                set {
                    this[this.tableRegTBL.QuestionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Answer {
                get {
                    return ((string)(this[this.tableRegTBL.AnswerColumn]));
                }
                set {
                    this[this.tableRegTBL.AnswerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Image {
                get {
                    try {
                        return ((byte[])(this[this.tableRegTBL.ImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Image\' in table \'RegTBL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRegTBL.ImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageNull() {
                return this.IsNull(this.tableRegTBL.ImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageNull() {
                this[this.tableRegTBL.ImageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SalesTblRow : global::System.Data.DataRow {
            
            private SalesTblDataTable tableSalesTbl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SalesTblRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSalesTbl = ((SalesTblDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sal_id {
                get {
                    return ((int)(this[this.tableSalesTbl.Sal_idColumn]));
                }
                set {
                    this[this.tableSalesTbl.Sal_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sal_date {
                get {
                    return ((string)(this[this.tableSalesTbl.Sal_dateColumn]));
                }
                set {
                    this[this.tableSalesTbl.Sal_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sal_customer {
                get {
                    return ((string)(this[this.tableSalesTbl.Sal_customerColumn]));
                }
                set {
                    this[this.tableSalesTbl.Sal_customerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sal_Pro_id {
                get {
                    return ((int)(this[this.tableSalesTbl.Sal_Pro_idColumn]));
                }
                set {
                    this[this.tableSalesTbl.Sal_Pro_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sal_name {
                get {
                    return ((string)(this[this.tableSalesTbl.Sal_nameColumn]));
                }
                set {
                    this[this.tableSalesTbl.Sal_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sal_qty {
                get {
                    return ((string)(this[this.tableSalesTbl.Sal_qtyColumn]));
                }
                set {
                    this[this.tableSalesTbl.Sal_qtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sal_price {
                get {
                    return ((string)(this[this.tableSalesTbl.Sal_priceColumn]));
                }
                set {
                    this[this.tableSalesTbl.Sal_priceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sal_total {
                get {
                    return ((string)(this[this.tableSalesTbl.Sal_totalColumn]));
                }
                set {
                    this[this.tableSalesTbl.Sal_totalColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SuppliersTblRow : global::System.Data.DataRow {
            
            private SuppliersTblDataTable tableSuppliersTbl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SuppliersTblRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSuppliersTbl = ((SuppliersTblDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Spl_id {
                get {
                    return ((int)(this[this.tableSuppliersTbl.Spl_idColumn]));
                }
                set {
                    this[this.tableSuppliersTbl.Spl_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Spl_name {
                get {
                    return ((string)(this[this.tableSuppliersTbl.Spl_nameColumn]));
                }
                set {
                    this[this.tableSuppliersTbl.Spl_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Spl_phone {
                get {
                    return ((string)(this[this.tableSuppliersTbl.Spl_phoneColumn]));
                }
                set {
                    this[this.tableSuppliersTbl.Spl_phoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Spl_email {
                get {
                    return ((string)(this[this.tableSuppliersTbl.Spl_emailColumn]));
                }
                set {
                    this[this.tableSuppliersTbl.Spl_emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Spl_address {
                get {
                    return ((string)(this[this.tableSuppliersTbl.Spl_addressColumn]));
                }
                set {
                    this[this.tableSuppliersTbl.Spl_addressColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class categoryTblRowChangeEvent : global::System.EventArgs {
            
            private categoryTblRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public categoryTblRowChangeEvent(categoryTblRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public categoryTblRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomersTblRowChangeEvent : global::System.EventArgs {
            
            private CustomersTblRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomersTblRowChangeEvent(CustomersTblRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomersTblRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductsTblRowChangeEvent : global::System.EventArgs {
            
            private ProductsTblRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductsTblRowChangeEvent(ProductsTblRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductsTblRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PurchasesTblRowChangeEvent : global::System.EventArgs {
            
            private PurchasesTblRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PurchasesTblRowChangeEvent(PurchasesTblRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PurchasesTblRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RegTBLRowChangeEvent : global::System.EventArgs {
            
            private RegTBLRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegTBLRowChangeEvent(RegTBLRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegTBLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SalesTblRowChangeEvent : global::System.EventArgs {
            
            private SalesTblRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesTblRowChangeEvent(SalesTblRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesTblRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SuppliersTblRowChangeEvent : global::System.EventArgs {
            
            private SuppliersTblRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuppliersTblRowChangeEvent(SuppliersTblRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuppliersTblRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace GroceryManagementSystem.DataSet1TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class categoryTblTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public categoryTblTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "categoryTbl";
            tableMapping.ColumnMappings.Add("cat_id", "cat_id");
            tableMapping.ColumnMappings.Add("cat_name", "cat_name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[categoryTbl] WHERE (([cat_id] = @Original_cat_id) AND ([cat_na" +
                "me] = @Original_cat_name))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cat_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cat_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cat_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cat_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[categoryTbl] ([cat_name]) VALUES (@cat_name);\r\nSELECT cat_id, " +
                "cat_name FROM categoryTbl WHERE (cat_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cat_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cat_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[categoryTbl] SET [cat_name] = @cat_name WHERE (([cat_id] = @Origina" +
                "l_cat_id) AND ([cat_name] = @Original_cat_name));\r\nSELECT cat_id, cat_name FROM " +
                "categoryTbl WHERE (cat_id = @cat_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cat_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cat_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cat_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cat_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cat_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cat_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cat_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "cat_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GroceryManagementSystem.Properties.Settings.Default.gmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT cat_id, cat_name FROM dbo.categoryTbl";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.categoryTblDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.categoryTblDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.categoryTblDataTable dataTable = new DataSet1.categoryTblDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.categoryTblDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "categoryTbl");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_cat_id, string Original_cat_name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_cat_id));
            if ((Original_cat_name == null)) {
                throw new global::System.ArgumentNullException("Original_cat_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_cat_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string cat_name) {
            if ((cat_name == null)) {
                throw new global::System.ArgumentNullException("cat_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(cat_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string cat_name, int Original_cat_id, string Original_cat_name, int cat_id) {
            if ((cat_name == null)) {
                throw new global::System.ArgumentNullException("cat_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(cat_name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_cat_id));
            if ((Original_cat_name == null)) {
                throw new global::System.ArgumentNullException("Original_cat_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_cat_name));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(cat_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string cat_name, int Original_cat_id, string Original_cat_name) {
            return this.Update(cat_name, Original_cat_id, Original_cat_name, Original_cat_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CustomersTblTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CustomersTblTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CustomersTbl";
            tableMapping.ColumnMappings.Add("C_id", "C_id");
            tableMapping.ColumnMappings.Add("C_name", "C_name");
            tableMapping.ColumnMappings.Add("C_phone", "C_phone");
            tableMapping.ColumnMappings.Add("C_email", "C_email");
            tableMapping.ColumnMappings.Add("C_address", "C_address");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CustomersTbl] WHERE (([C_id] = @Original_C_id) AND ([C_name] =" +
                " @Original_C_name) AND ([C_phone] = @Original_C_phone) AND ([C_email] = @Origina" +
                "l_C_email) AND ([C_address] = @Original_C_address))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_C_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_C_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_C_phone", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_phone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_C_email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_email", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_C_address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CustomersTbl] ([C_name], [C_phone], [C_email], [C_address]) VA" +
                "LUES (@C_name, @C_phone, @C_email, @C_address);\r\nSELECT C_id, C_name, C_phone, C" +
                "_email, C_address FROM CustomersTbl WHERE (C_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@C_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@C_phone", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_phone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@C_email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@C_address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[CustomersTbl] SET [C_name] = @C_name, [C_phone] = @C_phone, [C_email] = @C_email, [C_address] = @C_address WHERE (([C_id] = @Original_C_id) AND ([C_name] = @Original_C_name) AND ([C_phone] = @Original_C_phone) AND ([C_email] = @Original_C_email) AND ([C_address] = @Original_C_address));
SELECT C_id, C_name, C_phone, C_email, C_address FROM CustomersTbl WHERE (C_id = @C_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@C_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@C_phone", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_phone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@C_email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@C_address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_C_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_C_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_C_phone", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_phone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_C_email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_email", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_C_address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "C_address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@C_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "C_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GroceryManagementSystem.Properties.Settings.Default.gmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT C_id, C_name, C_phone, C_email, C_address FROM dbo.CustomersTbl";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.CustomersTblDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.CustomersTblDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.CustomersTblDataTable dataTable = new DataSet1.CustomersTblDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.CustomersTblDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "CustomersTbl");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_C_id, string Original_C_name, string Original_C_phone, string Original_C_email, string Original_C_address) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_C_id));
            if ((Original_C_name == null)) {
                throw new global::System.ArgumentNullException("Original_C_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_C_name));
            }
            if ((Original_C_phone == null)) {
                throw new global::System.ArgumentNullException("Original_C_phone");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_C_phone));
            }
            if ((Original_C_email == null)) {
                throw new global::System.ArgumentNullException("Original_C_email");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_C_email));
            }
            if ((Original_C_address == null)) {
                throw new global::System.ArgumentNullException("Original_C_address");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_C_address));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string C_name, string C_phone, string C_email, string C_address) {
            if ((C_name == null)) {
                throw new global::System.ArgumentNullException("C_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(C_name));
            }
            if ((C_phone == null)) {
                throw new global::System.ArgumentNullException("C_phone");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(C_phone));
            }
            if ((C_email == null)) {
                throw new global::System.ArgumentNullException("C_email");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(C_email));
            }
            if ((C_address == null)) {
                throw new global::System.ArgumentNullException("C_address");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(C_address));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string C_name, string C_phone, string C_email, string C_address, int Original_C_id, string Original_C_name, string Original_C_phone, string Original_C_email, string Original_C_address, int C_id) {
            if ((C_name == null)) {
                throw new global::System.ArgumentNullException("C_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(C_name));
            }
            if ((C_phone == null)) {
                throw new global::System.ArgumentNullException("C_phone");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(C_phone));
            }
            if ((C_email == null)) {
                throw new global::System.ArgumentNullException("C_email");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(C_email));
            }
            if ((C_address == null)) {
                throw new global::System.ArgumentNullException("C_address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(C_address));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_C_id));
            if ((Original_C_name == null)) {
                throw new global::System.ArgumentNullException("Original_C_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_C_name));
            }
            if ((Original_C_phone == null)) {
                throw new global::System.ArgumentNullException("Original_C_phone");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_C_phone));
            }
            if ((Original_C_email == null)) {
                throw new global::System.ArgumentNullException("Original_C_email");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_C_email));
            }
            if ((Original_C_address == null)) {
                throw new global::System.ArgumentNullException("Original_C_address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_C_address));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(C_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string C_name, string C_phone, string C_email, string C_address, int Original_C_id, string Original_C_name, string Original_C_phone, string Original_C_email, string Original_C_address) {
            return this.Update(C_name, C_phone, C_email, C_address, Original_C_id, Original_C_name, Original_C_phone, Original_C_email, Original_C_address, Original_C_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ProductsTblTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProductsTblTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ProductsTbl";
            tableMapping.ColumnMappings.Add("Pro_id", "Pro_id");
            tableMapping.ColumnMappings.Add("Pro_name", "Pro_name");
            tableMapping.ColumnMappings.Add("Pro_category", "Pro_category");
            tableMapping.ColumnMappings.Add("Pro_cost", "Pro_cost");
            tableMapping.ColumnMappings.Add("Pro_price", "Pro_price");
            tableMapping.ColumnMappings.Add("Pro_qty", "Pro_qty");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[ProductsTbl] WHERE (([Pro_id] = @Original_Pro_id) AND ([Pro_name] = @Original_Pro_name) AND ([Pro_category] = @Original_Pro_category) AND ([Pro_cost] = @Original_Pro_cost) AND ([Pro_price] = @Original_Pro_price) AND ([Pro_qty] = @Original_Pro_qty))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pro_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pro_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pro_category", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_category", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pro_cost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_cost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pro_price", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_price", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pro_qty", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_qty", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ProductsTbl] ([Pro_name], [Pro_category], [Pro_cost], [Pro_price], [Pro_qty]) VALUES (@Pro_name, @Pro_category, @Pro_cost, @Pro_price, @Pro_qty);
SELECT Pro_id, Pro_name, Pro_category, Pro_cost, Pro_price, Pro_qty FROM ProductsTbl WHERE (Pro_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pro_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pro_category", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_category", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pro_cost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pro_price", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_price", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pro_qty", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_qty", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ProductsTbl] SET [Pro_name] = @Pro_name, [Pro_category] = @Pro_category, [Pro_cost] = @Pro_cost, [Pro_price] = @Pro_price, [Pro_qty] = @Pro_qty WHERE (([Pro_id] = @Original_Pro_id) AND ([Pro_name] = @Original_Pro_name) AND ([Pro_category] = @Original_Pro_category) AND ([Pro_cost] = @Original_Pro_cost) AND ([Pro_price] = @Original_Pro_price) AND ([Pro_qty] = @Original_Pro_qty));
SELECT Pro_id, Pro_name, Pro_category, Pro_cost, Pro_price, Pro_qty FROM ProductsTbl WHERE (Pro_id = @Pro_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pro_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pro_category", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_category", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pro_cost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pro_price", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_price", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pro_qty", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_qty", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pro_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pro_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pro_category", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_category", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pro_cost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_cost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pro_price", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_price", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pro_qty", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_qty", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pro_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Pro_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GroceryManagementSystem.Properties.Settings.Default.gmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Pro_id, Pro_name, Pro_category, Pro_cost, Pro_price, Pro_qty FROM dbo.Prod" +
                "uctsTbl";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.ProductsTblDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.ProductsTblDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.ProductsTblDataTable dataTable = new DataSet1.ProductsTblDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.ProductsTblDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "ProductsTbl");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Pro_id, string Original_Pro_name, string Original_Pro_category, double Original_Pro_cost, double Original_Pro_price, int Original_Pro_qty) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Pro_id));
            if ((Original_Pro_name == null)) {
                throw new global::System.ArgumentNullException("Original_Pro_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Pro_name));
            }
            if ((Original_Pro_category == null)) {
                throw new global::System.ArgumentNullException("Original_Pro_category");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Pro_category));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((double)(Original_Pro_cost));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_Pro_price));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_Pro_qty));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Pro_name, string Pro_category, double Pro_cost, double Pro_price, int Pro_qty) {
            if ((Pro_name == null)) {
                throw new global::System.ArgumentNullException("Pro_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Pro_name));
            }
            if ((Pro_category == null)) {
                throw new global::System.ArgumentNullException("Pro_category");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Pro_category));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((double)(Pro_cost));
            this.Adapter.InsertCommand.Parameters[3].Value = ((double)(Pro_price));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Pro_qty));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Pro_name, string Pro_category, double Pro_cost, double Pro_price, int Pro_qty, int Original_Pro_id, string Original_Pro_name, string Original_Pro_category, double Original_Pro_cost, double Original_Pro_price, int Original_Pro_qty, int Pro_id) {
            if ((Pro_name == null)) {
                throw new global::System.ArgumentNullException("Pro_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Pro_name));
            }
            if ((Pro_category == null)) {
                throw new global::System.ArgumentNullException("Pro_category");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Pro_category));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(Pro_cost));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(Pro_price));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Pro_qty));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_Pro_id));
            if ((Original_Pro_name == null)) {
                throw new global::System.ArgumentNullException("Original_Pro_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Pro_name));
            }
            if ((Original_Pro_category == null)) {
                throw new global::System.ArgumentNullException("Original_Pro_category");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Pro_category));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(Original_Pro_cost));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(Original_Pro_price));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_Pro_qty));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Pro_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Pro_name, string Pro_category, double Pro_cost, double Pro_price, int Pro_qty, int Original_Pro_id, string Original_Pro_name, string Original_Pro_category, double Original_Pro_cost, double Original_Pro_price, int Original_Pro_qty) {
            return this.Update(Pro_name, Pro_category, Pro_cost, Pro_price, Pro_qty, Original_Pro_id, Original_Pro_name, Original_Pro_category, Original_Pro_cost, Original_Pro_price, Original_Pro_qty, Original_Pro_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PurchasesTblTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PurchasesTblTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PurchasesTbl";
            tableMapping.ColumnMappings.Add("Pur_id", "Pur_id");
            tableMapping.ColumnMappings.Add("Pur_date", "Pur_date");
            tableMapping.ColumnMappings.Add("Pur_supplier", "Pur_supplier");
            tableMapping.ColumnMappings.Add("Pur_pro", "Pur_pro");
            tableMapping.ColumnMappings.Add("Pur_qty", "Pur_qty");
            tableMapping.ColumnMappings.Add("Pur_cost", "Pur_cost");
            tableMapping.ColumnMappings.Add("Pur_amount", "Pur_amount");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[PurchasesTbl] WHERE (([Pur_id] = @Original_Pur_id) AND ([Pur_date] = @Original_Pur_date) AND ([Pur_supplier] = @Original_Pur_supplier) AND ([Pur_pro] = @Original_Pur_pro) AND ([Pur_qty] = @Original_Pur_qty) AND ([Pur_cost] = @Original_Pur_cost) AND ([Pur_amount] = @Original_Pur_amount))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pur_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pur_date", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pur_supplier", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_supplier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pur_pro", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_pro", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pur_qty", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_qty", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pur_cost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_cost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pur_amount", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_amount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[PurchasesTbl] ([Pur_date], [Pur_supplier], [Pur_pro], [Pur_qty], [Pur_cost], [Pur_amount]) VALUES (@Pur_date, @Pur_supplier, @Pur_pro, @Pur_qty, @Pur_cost, @Pur_amount);
SELECT Pur_id, Pur_date, Pur_supplier, Pur_pro, Pur_qty, Pur_cost, Pur_amount FROM PurchasesTbl WHERE (Pur_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pur_date", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pur_supplier", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_supplier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pur_pro", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_pro", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pur_qty", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_qty", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pur_cost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pur_amount", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_amount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[PurchasesTbl] SET [Pur_date] = @Pur_date, [Pur_supplier] = @Pur_supplier, [Pur_pro] = @Pur_pro, [Pur_qty] = @Pur_qty, [Pur_cost] = @Pur_cost, [Pur_amount] = @Pur_amount WHERE (([Pur_id] = @Original_Pur_id) AND ([Pur_date] = @Original_Pur_date) AND ([Pur_supplier] = @Original_Pur_supplier) AND ([Pur_pro] = @Original_Pur_pro) AND ([Pur_qty] = @Original_Pur_qty) AND ([Pur_cost] = @Original_Pur_cost) AND ([Pur_amount] = @Original_Pur_amount));
SELECT Pur_id, Pur_date, Pur_supplier, Pur_pro, Pur_qty, Pur_cost, Pur_amount FROM PurchasesTbl WHERE (Pur_id = @Pur_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pur_date", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pur_supplier", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_supplier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pur_pro", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_pro", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pur_qty", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_qty", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pur_cost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pur_amount", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_amount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pur_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pur_date", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pur_supplier", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_supplier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pur_pro", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_pro", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pur_qty", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_qty", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pur_cost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_cost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pur_amount", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_amount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pur_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Pur_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GroceryManagementSystem.Properties.Settings.Default.gmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Pur_id, Pur_date, Pur_supplier, Pur_pro, Pur_qty, Pur_cost, Pur_amount FRO" +
                "M dbo.PurchasesTbl";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.PurchasesTblDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.PurchasesTblDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.PurchasesTblDataTable dataTable = new DataSet1.PurchasesTblDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.PurchasesTblDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "PurchasesTbl");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Pur_id, string Original_Pur_date, string Original_Pur_supplier, string Original_Pur_pro, int Original_Pur_qty, double Original_Pur_cost, double Original_Pur_amount) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Pur_id));
            if ((Original_Pur_date == null)) {
                throw new global::System.ArgumentNullException("Original_Pur_date");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Pur_date));
            }
            if ((Original_Pur_supplier == null)) {
                throw new global::System.ArgumentNullException("Original_Pur_supplier");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Pur_supplier));
            }
            if ((Original_Pur_pro == null)) {
                throw new global::System.ArgumentNullException("Original_Pur_pro");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Pur_pro));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_Pur_qty));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((double)(Original_Pur_cost));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_Pur_amount));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Pur_date, string Pur_supplier, string Pur_pro, int Pur_qty, double Pur_cost, double Pur_amount) {
            if ((Pur_date == null)) {
                throw new global::System.ArgumentNullException("Pur_date");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Pur_date));
            }
            if ((Pur_supplier == null)) {
                throw new global::System.ArgumentNullException("Pur_supplier");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Pur_supplier));
            }
            if ((Pur_pro == null)) {
                throw new global::System.ArgumentNullException("Pur_pro");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Pur_pro));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(Pur_qty));
            this.Adapter.InsertCommand.Parameters[4].Value = ((double)(Pur_cost));
            this.Adapter.InsertCommand.Parameters[5].Value = ((double)(Pur_amount));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Pur_date, string Pur_supplier, string Pur_pro, int Pur_qty, double Pur_cost, double Pur_amount, int Original_Pur_id, string Original_Pur_date, string Original_Pur_supplier, string Original_Pur_pro, int Original_Pur_qty, double Original_Pur_cost, double Original_Pur_amount, int Pur_id) {
            if ((Pur_date == null)) {
                throw new global::System.ArgumentNullException("Pur_date");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Pur_date));
            }
            if ((Pur_supplier == null)) {
                throw new global::System.ArgumentNullException("Pur_supplier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Pur_supplier));
            }
            if ((Pur_pro == null)) {
                throw new global::System.ArgumentNullException("Pur_pro");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Pur_pro));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Pur_qty));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(Pur_cost));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(Pur_amount));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_Pur_id));
            if ((Original_Pur_date == null)) {
                throw new global::System.ArgumentNullException("Original_Pur_date");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Pur_date));
            }
            if ((Original_Pur_supplier == null)) {
                throw new global::System.ArgumentNullException("Original_Pur_supplier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Pur_supplier));
            }
            if ((Original_Pur_pro == null)) {
                throw new global::System.ArgumentNullException("Original_Pur_pro");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Pur_pro));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_Pur_qty));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(Original_Pur_cost));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((double)(Original_Pur_amount));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Pur_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Pur_date, string Pur_supplier, string Pur_pro, int Pur_qty, double Pur_cost, double Pur_amount, int Original_Pur_id, string Original_Pur_date, string Original_Pur_supplier, string Original_Pur_pro, int Original_Pur_qty, double Original_Pur_cost, double Original_Pur_amount) {
            return this.Update(Pur_date, Pur_supplier, Pur_pro, Pur_qty, Pur_cost, Pur_amount, Original_Pur_id, Original_Pur_date, Original_Pur_supplier, Original_Pur_pro, Original_Pur_qty, Original_Pur_cost, Original_Pur_amount, Original_Pur_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RegTBLTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RegTBLTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "RegTBL";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("Email", "Email");
            tableMapping.ColumnMappings.Add("FullName", "FullName");
            tableMapping.ColumnMappings.Add("No", "No");
            tableMapping.ColumnMappings.Add("DOB", "DOB");
            tableMapping.ColumnMappings.Add("RegDate", "RegDate");
            tableMapping.ColumnMappings.Add("Question", "Question");
            tableMapping.ColumnMappings.Add("Answer", "Answer");
            tableMapping.ColumnMappings.Add("Image", "Image");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[RegTBL] WHERE (([id] = @Original_id) AND ([UserName] = @Original_UserName) AND ([Password] = @Original_Password) AND ([Email] = @Original_Email) AND ([FullName] = @Original_FullName) AND ([No] = @Original_No) AND ([DOB] = @Original_DOB) AND ([RegDate] = @Original_RegDate) AND ([Question] = @Original_Question) AND ([Answer] = @Original_Answer))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FullName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FullName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_No", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOB", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOB", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RegDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Question", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Question", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Answer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Answer", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[RegTBL] ([id], [UserName], [Password], [Email], [FullName], [No], [DOB], [RegDate], [Question], [Answer], [Image]) VALUES (@id, @UserName, @Password, @Email, @FullName, @No, @DOB, @RegDate, @Question, @Answer, @Image);
SELECT id, UserName, Password, Email, FullName, No, DOB, RegDate, Question, Answer, Image FROM RegTBL WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FullName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FullName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@No", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOB", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Question", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Question", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Answer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Answer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Image", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Image", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[RegTBL] SET [id] = @id, [UserName] = @UserName, [Password] = @Password, [Email] = @Email, [FullName] = @FullName, [No] = @No, [DOB] = @DOB, [RegDate] = @RegDate, [Question] = @Question, [Answer] = @Answer, [Image] = @Image WHERE (([id] = @Original_id) AND ([UserName] = @Original_UserName) AND ([Password] = @Original_Password) AND ([Email] = @Original_Email) AND ([FullName] = @Original_FullName) AND ([No] = @Original_No) AND ([DOB] = @Original_DOB) AND ([RegDate] = @Original_RegDate) AND ([Question] = @Original_Question) AND ([Answer] = @Original_Answer));
SELECT id, UserName, Password, Email, FullName, No, DOB, RegDate, Question, Answer, Image FROM RegTBL WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FullName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FullName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@No", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "No", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOB", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Question", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Question", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Answer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Answer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Image", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Image", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Password", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Password", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FullName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FullName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_No", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "No", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOB", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOB", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RegDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Question", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Question", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Answer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Answer", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GroceryManagementSystem.Properties.Settings.Default.gmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, UserName, Password, Email, FullName, No, DOB, RegDate, Question, Answe" +
                "r, Image FROM dbo.RegTBL";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.RegTBLDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.RegTBLDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.RegTBLDataTable dataTable = new DataSet1.RegTBLDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.RegTBLDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "RegTBL");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_id, string Original_UserName, string Original_Password, string Original_Email, string Original_FullName, string Original_No, string Original_DOB, string Original_RegDate, string Original_Question, string Original_Answer) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_id));
            if ((Original_UserName == null)) {
                throw new global::System.ArgumentNullException("Original_UserName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_UserName));
            }
            if ((Original_Password == null)) {
                throw new global::System.ArgumentNullException("Original_Password");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Password));
            }
            if ((Original_Email == null)) {
                throw new global::System.ArgumentNullException("Original_Email");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Email));
            }
            if ((Original_FullName == null)) {
                throw new global::System.ArgumentNullException("Original_FullName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_FullName));
            }
            if ((Original_No == null)) {
                throw new global::System.ArgumentNullException("Original_No");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_No));
            }
            if ((Original_DOB == null)) {
                throw new global::System.ArgumentNullException("Original_DOB");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_DOB));
            }
            if ((Original_RegDate == null)) {
                throw new global::System.ArgumentNullException("Original_RegDate");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_RegDate));
            }
            if ((Original_Question == null)) {
                throw new global::System.ArgumentNullException("Original_Question");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Question));
            }
            if ((Original_Answer == null)) {
                throw new global::System.ArgumentNullException("Original_Answer");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_Answer));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int id, string UserName, string Password, string Email, string FullName, string No, string DOB, string RegDate, string Question, string Answer, byte[] Image) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(id));
            if ((UserName == null)) {
                throw new global::System.ArgumentNullException("UserName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(UserName));
            }
            if ((Password == null)) {
                throw new global::System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Password));
            }
            if ((Email == null)) {
                throw new global::System.ArgumentNullException("Email");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Email));
            }
            if ((FullName == null)) {
                throw new global::System.ArgumentNullException("FullName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(FullName));
            }
            if ((No == null)) {
                throw new global::System.ArgumentNullException("No");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(No));
            }
            if ((DOB == null)) {
                throw new global::System.ArgumentNullException("DOB");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(DOB));
            }
            if ((RegDate == null)) {
                throw new global::System.ArgumentNullException("RegDate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(RegDate));
            }
            if ((Question == null)) {
                throw new global::System.ArgumentNullException("Question");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Question));
            }
            if ((Answer == null)) {
                throw new global::System.ArgumentNullException("Answer");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Answer));
            }
            if ((Image == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((byte[])(Image));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int id, 
                    string UserName, 
                    string Password, 
                    string Email, 
                    string FullName, 
                    string No, 
                    string DOB, 
                    string RegDate, 
                    string Question, 
                    string Answer, 
                    byte[] Image, 
                    int Original_id, 
                    string Original_UserName, 
                    string Original_Password, 
                    string Original_Email, 
                    string Original_FullName, 
                    string Original_No, 
                    string Original_DOB, 
                    string Original_RegDate, 
                    string Original_Question, 
                    string Original_Answer) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(id));
            if ((UserName == null)) {
                throw new global::System.ArgumentNullException("UserName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(UserName));
            }
            if ((Password == null)) {
                throw new global::System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Password));
            }
            if ((Email == null)) {
                throw new global::System.ArgumentNullException("Email");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Email));
            }
            if ((FullName == null)) {
                throw new global::System.ArgumentNullException("FullName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(FullName));
            }
            if ((No == null)) {
                throw new global::System.ArgumentNullException("No");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(No));
            }
            if ((DOB == null)) {
                throw new global::System.ArgumentNullException("DOB");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(DOB));
            }
            if ((RegDate == null)) {
                throw new global::System.ArgumentNullException("RegDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(RegDate));
            }
            if ((Question == null)) {
                throw new global::System.ArgumentNullException("Question");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Question));
            }
            if ((Answer == null)) {
                throw new global::System.ArgumentNullException("Answer");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Answer));
            }
            if ((Image == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((byte[])(Image));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_id));
            if ((Original_UserName == null)) {
                throw new global::System.ArgumentNullException("Original_UserName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_UserName));
            }
            if ((Original_Password == null)) {
                throw new global::System.ArgumentNullException("Original_Password");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Password));
            }
            if ((Original_Email == null)) {
                throw new global::System.ArgumentNullException("Original_Email");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_Email));
            }
            if ((Original_FullName == null)) {
                throw new global::System.ArgumentNullException("Original_FullName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_FullName));
            }
            if ((Original_No == null)) {
                throw new global::System.ArgumentNullException("Original_No");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_No));
            }
            if ((Original_DOB == null)) {
                throw new global::System.ArgumentNullException("Original_DOB");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_DOB));
            }
            if ((Original_RegDate == null)) {
                throw new global::System.ArgumentNullException("Original_RegDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_RegDate));
            }
            if ((Original_Question == null)) {
                throw new global::System.ArgumentNullException("Original_Question");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_Question));
            }
            if ((Original_Answer == null)) {
                throw new global::System.ArgumentNullException("Original_Answer");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_Answer));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string UserName, 
                    string Password, 
                    string Email, 
                    string FullName, 
                    string No, 
                    string DOB, 
                    string RegDate, 
                    string Question, 
                    string Answer, 
                    byte[] Image, 
                    int Original_id, 
                    string Original_UserName, 
                    string Original_Password, 
                    string Original_Email, 
                    string Original_FullName, 
                    string Original_No, 
                    string Original_DOB, 
                    string Original_RegDate, 
                    string Original_Question, 
                    string Original_Answer) {
            return this.Update(Original_id, UserName, Password, Email, FullName, No, DOB, RegDate, Question, Answer, Image, Original_id, Original_UserName, Original_Password, Original_Email, Original_FullName, Original_No, Original_DOB, Original_RegDate, Original_Question, Original_Answer);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SalesTblTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SalesTblTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SalesTbl";
            tableMapping.ColumnMappings.Add("Sal_id", "Sal_id");
            tableMapping.ColumnMappings.Add("Sal_date", "Sal_date");
            tableMapping.ColumnMappings.Add("Sal_customer", "Sal_customer");
            tableMapping.ColumnMappings.Add("Sal_Pro_id", "Sal_Pro_id");
            tableMapping.ColumnMappings.Add("Sal_name", "Sal_name");
            tableMapping.ColumnMappings.Add("Sal_qty", "Sal_qty");
            tableMapping.ColumnMappings.Add("Sal_price", "Sal_price");
            tableMapping.ColumnMappings.Add("Sal_total", "Sal_total");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[SalesTbl] WHERE (([Sal_id] = @Original_Sal_id) AND ([Sal_date] = @Original_Sal_date) AND ([Sal_customer] = @Original_Sal_customer) AND ([Sal_Pro_id] = @Original_Sal_Pro_id) AND ([Sal_name] = @Original_Sal_name) AND ([Sal_qty] = @Original_Sal_qty) AND ([Sal_price] = @Original_Sal_price) AND ([Sal_total] = @Original_Sal_total))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sal_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sal_date", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sal_customer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_customer", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sal_Pro_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_Pro_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sal_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sal_qty", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_qty", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sal_price", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_price", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sal_total", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_total", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[SalesTbl] ([Sal_date], [Sal_customer], [Sal_Pro_id], [Sal_name], [Sal_qty], [Sal_price], [Sal_total]) VALUES (@Sal_date, @Sal_customer, @Sal_Pro_id, @Sal_name, @Sal_qty, @Sal_price, @Sal_total);
SELECT Sal_id, Sal_date, Sal_customer, Sal_Pro_id, Sal_name, Sal_qty, Sal_price, Sal_total FROM SalesTbl WHERE (Sal_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sal_date", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sal_customer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_customer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sal_Pro_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_Pro_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sal_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sal_qty", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_qty", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sal_price", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_price", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sal_total", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_total", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SalesTbl] SET [Sal_date] = @Sal_date, [Sal_customer] = @Sal_customer, [Sal_Pro_id] = @Sal_Pro_id, [Sal_name] = @Sal_name, [Sal_qty] = @Sal_qty, [Sal_price] = @Sal_price, [Sal_total] = @Sal_total WHERE (([Sal_id] = @Original_Sal_id) AND ([Sal_date] = @Original_Sal_date) AND ([Sal_customer] = @Original_Sal_customer) AND ([Sal_Pro_id] = @Original_Sal_Pro_id) AND ([Sal_name] = @Original_Sal_name) AND ([Sal_qty] = @Original_Sal_qty) AND ([Sal_price] = @Original_Sal_price) AND ([Sal_total] = @Original_Sal_total));
SELECT Sal_id, Sal_date, Sal_customer, Sal_Pro_id, Sal_name, Sal_qty, Sal_price, Sal_total FROM SalesTbl WHERE (Sal_id = @Sal_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sal_date", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sal_customer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_customer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sal_Pro_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_Pro_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sal_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sal_qty", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_qty", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sal_price", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_price", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sal_total", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_total", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sal_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sal_date", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sal_customer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_customer", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sal_Pro_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_Pro_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sal_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sal_qty", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_qty", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sal_price", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_price", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sal_total", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_total", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sal_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Sal_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GroceryManagementSystem.Properties.Settings.Default.gmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Sal_id, Sal_date, Sal_customer, Sal_Pro_id, Sal_name, Sal_qty, Sal_price, " +
                "Sal_total FROM dbo.SalesTbl";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.SalesTblDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.SalesTblDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.SalesTblDataTable dataTable = new DataSet1.SalesTblDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.SalesTblDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "SalesTbl");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Sal_id, string Original_Sal_date, string Original_Sal_customer, int Original_Sal_Pro_id, string Original_Sal_name, string Original_Sal_qty, string Original_Sal_price, string Original_Sal_total) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Sal_id));
            if ((Original_Sal_date == null)) {
                throw new global::System.ArgumentNullException("Original_Sal_date");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Sal_date));
            }
            if ((Original_Sal_customer == null)) {
                throw new global::System.ArgumentNullException("Original_Sal_customer");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Sal_customer));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_Sal_Pro_id));
            if ((Original_Sal_name == null)) {
                throw new global::System.ArgumentNullException("Original_Sal_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Sal_name));
            }
            if ((Original_Sal_qty == null)) {
                throw new global::System.ArgumentNullException("Original_Sal_qty");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Sal_qty));
            }
            if ((Original_Sal_price == null)) {
                throw new global::System.ArgumentNullException("Original_Sal_price");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Sal_price));
            }
            if ((Original_Sal_total == null)) {
                throw new global::System.ArgumentNullException("Original_Sal_total");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_Sal_total));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Sal_date, string Sal_customer, int Sal_Pro_id, string Sal_name, string Sal_qty, string Sal_price, string Sal_total) {
            if ((Sal_date == null)) {
                throw new global::System.ArgumentNullException("Sal_date");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Sal_date));
            }
            if ((Sal_customer == null)) {
                throw new global::System.ArgumentNullException("Sal_customer");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Sal_customer));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Sal_Pro_id));
            if ((Sal_name == null)) {
                throw new global::System.ArgumentNullException("Sal_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Sal_name));
            }
            if ((Sal_qty == null)) {
                throw new global::System.ArgumentNullException("Sal_qty");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Sal_qty));
            }
            if ((Sal_price == null)) {
                throw new global::System.ArgumentNullException("Sal_price");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Sal_price));
            }
            if ((Sal_total == null)) {
                throw new global::System.ArgumentNullException("Sal_total");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Sal_total));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Sal_date, 
                    string Sal_customer, 
                    int Sal_Pro_id, 
                    string Sal_name, 
                    string Sal_qty, 
                    string Sal_price, 
                    string Sal_total, 
                    int Original_Sal_id, 
                    string Original_Sal_date, 
                    string Original_Sal_customer, 
                    int Original_Sal_Pro_id, 
                    string Original_Sal_name, 
                    string Original_Sal_qty, 
                    string Original_Sal_price, 
                    string Original_Sal_total, 
                    int Sal_id) {
            if ((Sal_date == null)) {
                throw new global::System.ArgumentNullException("Sal_date");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Sal_date));
            }
            if ((Sal_customer == null)) {
                throw new global::System.ArgumentNullException("Sal_customer");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Sal_customer));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Sal_Pro_id));
            if ((Sal_name == null)) {
                throw new global::System.ArgumentNullException("Sal_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Sal_name));
            }
            if ((Sal_qty == null)) {
                throw new global::System.ArgumentNullException("Sal_qty");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Sal_qty));
            }
            if ((Sal_price == null)) {
                throw new global::System.ArgumentNullException("Sal_price");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Sal_price));
            }
            if ((Sal_total == null)) {
                throw new global::System.ArgumentNullException("Sal_total");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Sal_total));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_Sal_id));
            if ((Original_Sal_date == null)) {
                throw new global::System.ArgumentNullException("Original_Sal_date");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Sal_date));
            }
            if ((Original_Sal_customer == null)) {
                throw new global::System.ArgumentNullException("Original_Sal_customer");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Sal_customer));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_Sal_Pro_id));
            if ((Original_Sal_name == null)) {
                throw new global::System.ArgumentNullException("Original_Sal_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_Sal_name));
            }
            if ((Original_Sal_qty == null)) {
                throw new global::System.ArgumentNullException("Original_Sal_qty");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_Sal_qty));
            }
            if ((Original_Sal_price == null)) {
                throw new global::System.ArgumentNullException("Original_Sal_price");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Sal_price));
            }
            if ((Original_Sal_total == null)) {
                throw new global::System.ArgumentNullException("Original_Sal_total");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_Sal_total));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Sal_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Sal_date, string Sal_customer, int Sal_Pro_id, string Sal_name, string Sal_qty, string Sal_price, string Sal_total, int Original_Sal_id, string Original_Sal_date, string Original_Sal_customer, int Original_Sal_Pro_id, string Original_Sal_name, string Original_Sal_qty, string Original_Sal_price, string Original_Sal_total) {
            return this.Update(Sal_date, Sal_customer, Sal_Pro_id, Sal_name, Sal_qty, Sal_price, Sal_total, Original_Sal_id, Original_Sal_date, Original_Sal_customer, Original_Sal_Pro_id, Original_Sal_name, Original_Sal_qty, Original_Sal_price, Original_Sal_total, Original_Sal_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SuppliersTblTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SuppliersTblTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SuppliersTbl";
            tableMapping.ColumnMappings.Add("Spl_id", "Spl_id");
            tableMapping.ColumnMappings.Add("Spl_name", "Spl_name");
            tableMapping.ColumnMappings.Add("Spl_phone", "Spl_phone");
            tableMapping.ColumnMappings.Add("Spl_email", "Spl_email");
            tableMapping.ColumnMappings.Add("Spl_address", "Spl_address");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SuppliersTbl] WHERE (([Spl_id] = @Original_Spl_id) AND ([Spl_n" +
                "ame] = @Original_Spl_name) AND ([Spl_phone] = @Original_Spl_phone) AND ([Spl_ema" +
                "il] = @Original_Spl_email) AND ([Spl_address] = @Original_Spl_address))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Spl_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Spl_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Spl_phone", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_phone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Spl_email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_email", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Spl_address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[SuppliersTbl] ([Spl_name], [Spl_phone], [Spl_email], [Spl_address]) VALUES (@Spl_name, @Spl_phone, @Spl_email, @Spl_address);
SELECT Spl_id, Spl_name, Spl_phone, Spl_email, Spl_address FROM SuppliersTbl WHERE (Spl_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Spl_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Spl_phone", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_phone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Spl_email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Spl_address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SuppliersTbl] SET [Spl_name] = @Spl_name, [Spl_phone] = @Spl_phone, [Spl_email] = @Spl_email, [Spl_address] = @Spl_address WHERE (([Spl_id] = @Original_Spl_id) AND ([Spl_name] = @Original_Spl_name) AND ([Spl_phone] = @Original_Spl_phone) AND ([Spl_email] = @Original_Spl_email) AND ([Spl_address] = @Original_Spl_address));
SELECT Spl_id, Spl_name, Spl_phone, Spl_email, Spl_address FROM SuppliersTbl WHERE (Spl_id = @Spl_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Spl_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Spl_phone", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_phone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Spl_email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Spl_address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Spl_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Spl_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Spl_phone", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_phone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Spl_email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_email", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Spl_address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Spl_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Spl_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GroceryManagementSystem.Properties.Settings.Default.gmsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Spl_id, Spl_name, Spl_phone, Spl_email, Spl_address FROM dbo.SuppliersTbl";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.SuppliersTblDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.SuppliersTblDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.SuppliersTblDataTable dataTable = new DataSet1.SuppliersTblDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.SuppliersTblDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "SuppliersTbl");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Spl_id, string Original_Spl_name, string Original_Spl_phone, string Original_Spl_email, string Original_Spl_address) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Spl_id));
            if ((Original_Spl_name == null)) {
                throw new global::System.ArgumentNullException("Original_Spl_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Spl_name));
            }
            if ((Original_Spl_phone == null)) {
                throw new global::System.ArgumentNullException("Original_Spl_phone");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Spl_phone));
            }
            if ((Original_Spl_email == null)) {
                throw new global::System.ArgumentNullException("Original_Spl_email");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Spl_email));
            }
            if ((Original_Spl_address == null)) {
                throw new global::System.ArgumentNullException("Original_Spl_address");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Spl_address));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Spl_name, string Spl_phone, string Spl_email, string Spl_address) {
            if ((Spl_name == null)) {
                throw new global::System.ArgumentNullException("Spl_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Spl_name));
            }
            if ((Spl_phone == null)) {
                throw new global::System.ArgumentNullException("Spl_phone");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Spl_phone));
            }
            if ((Spl_email == null)) {
                throw new global::System.ArgumentNullException("Spl_email");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Spl_email));
            }
            if ((Spl_address == null)) {
                throw new global::System.ArgumentNullException("Spl_address");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Spl_address));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Spl_name, string Spl_phone, string Spl_email, string Spl_address, int Original_Spl_id, string Original_Spl_name, string Original_Spl_phone, string Original_Spl_email, string Original_Spl_address, int Spl_id) {
            if ((Spl_name == null)) {
                throw new global::System.ArgumentNullException("Spl_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Spl_name));
            }
            if ((Spl_phone == null)) {
                throw new global::System.ArgumentNullException("Spl_phone");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Spl_phone));
            }
            if ((Spl_email == null)) {
                throw new global::System.ArgumentNullException("Spl_email");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Spl_email));
            }
            if ((Spl_address == null)) {
                throw new global::System.ArgumentNullException("Spl_address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Spl_address));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_Spl_id));
            if ((Original_Spl_name == null)) {
                throw new global::System.ArgumentNullException("Original_Spl_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Spl_name));
            }
            if ((Original_Spl_phone == null)) {
                throw new global::System.ArgumentNullException("Original_Spl_phone");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Spl_phone));
            }
            if ((Original_Spl_email == null)) {
                throw new global::System.ArgumentNullException("Original_Spl_email");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Spl_email));
            }
            if ((Original_Spl_address == null)) {
                throw new global::System.ArgumentNullException("Original_Spl_address");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Spl_address));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Spl_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Spl_name, string Spl_phone, string Spl_email, string Spl_address, int Original_Spl_id, string Original_Spl_name, string Original_Spl_phone, string Original_Spl_email, string Original_Spl_address) {
            return this.Update(Spl_name, Spl_phone, Spl_email, Spl_address, Original_Spl_id, Original_Spl_name, Original_Spl_phone, Original_Spl_email, Original_Spl_address, Original_Spl_id);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private categoryTblTableAdapter _categoryTblTableAdapter;
        
        private CustomersTblTableAdapter _customersTblTableAdapter;
        
        private ProductsTblTableAdapter _productsTblTableAdapter;
        
        private PurchasesTblTableAdapter _purchasesTblTableAdapter;
        
        private RegTBLTableAdapter _regTBLTableAdapter;
        
        private SalesTblTableAdapter _salesTblTableAdapter;
        
        private SuppliersTblTableAdapter _suppliersTblTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public categoryTblTableAdapter categoryTblTableAdapter {
            get {
                return this._categoryTblTableAdapter;
            }
            set {
                this._categoryTblTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CustomersTblTableAdapter CustomersTblTableAdapter {
            get {
                return this._customersTblTableAdapter;
            }
            set {
                this._customersTblTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ProductsTblTableAdapter ProductsTblTableAdapter {
            get {
                return this._productsTblTableAdapter;
            }
            set {
                this._productsTblTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PurchasesTblTableAdapter PurchasesTblTableAdapter {
            get {
                return this._purchasesTblTableAdapter;
            }
            set {
                this._purchasesTblTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public RegTBLTableAdapter RegTBLTableAdapter {
            get {
                return this._regTBLTableAdapter;
            }
            set {
                this._regTBLTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SalesTblTableAdapter SalesTblTableAdapter {
            get {
                return this._salesTblTableAdapter;
            }
            set {
                this._salesTblTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SuppliersTblTableAdapter SuppliersTblTableAdapter {
            get {
                return this._suppliersTblTableAdapter;
            }
            set {
                this._suppliersTblTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._categoryTblTableAdapter != null) 
                            && (this._categoryTblTableAdapter.Connection != null))) {
                    return this._categoryTblTableAdapter.Connection;
                }
                if (((this._customersTblTableAdapter != null) 
                            && (this._customersTblTableAdapter.Connection != null))) {
                    return this._customersTblTableAdapter.Connection;
                }
                if (((this._productsTblTableAdapter != null) 
                            && (this._productsTblTableAdapter.Connection != null))) {
                    return this._productsTblTableAdapter.Connection;
                }
                if (((this._purchasesTblTableAdapter != null) 
                            && (this._purchasesTblTableAdapter.Connection != null))) {
                    return this._purchasesTblTableAdapter.Connection;
                }
                if (((this._regTBLTableAdapter != null) 
                            && (this._regTBLTableAdapter.Connection != null))) {
                    return this._regTBLTableAdapter.Connection;
                }
                if (((this._salesTblTableAdapter != null) 
                            && (this._salesTblTableAdapter.Connection != null))) {
                    return this._salesTblTableAdapter.Connection;
                }
                if (((this._suppliersTblTableAdapter != null) 
                            && (this._suppliersTblTableAdapter.Connection != null))) {
                    return this._suppliersTblTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._categoryTblTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._customersTblTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._productsTblTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._purchasesTblTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._regTBLTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._salesTblTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._suppliersTblTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(DataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._regTBLTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.RegTBL.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._regTBLTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._salesTblTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SalesTbl.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._salesTblTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._suppliersTblTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SuppliersTbl.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._suppliersTblTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._purchasesTblTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PurchasesTbl.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._purchasesTblTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._categoryTblTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.categoryTbl.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._categoryTblTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._customersTblTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CustomersTbl.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._customersTblTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._productsTblTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ProductsTbl.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._productsTblTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(DataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._regTBLTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.RegTBL.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._regTBLTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._salesTblTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SalesTbl.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._salesTblTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._suppliersTblTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SuppliersTbl.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._suppliersTblTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._purchasesTblTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PurchasesTbl.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._purchasesTblTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._categoryTblTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.categoryTbl.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._categoryTblTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._customersTblTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CustomersTbl.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._customersTblTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._productsTblTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ProductsTbl.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._productsTblTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(DataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._productsTblTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ProductsTbl.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._productsTblTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._customersTblTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CustomersTbl.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._customersTblTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._categoryTblTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.categoryTbl.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._categoryTblTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._purchasesTblTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PurchasesTbl.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._purchasesTblTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._suppliersTblTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SuppliersTbl.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._suppliersTblTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._salesTblTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SalesTbl.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._salesTblTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._regTBLTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.RegTBL.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._regTBLTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(DataSet1 dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._categoryTblTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._categoryTblTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._customersTblTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._customersTblTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._productsTblTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._productsTblTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._purchasesTblTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._purchasesTblTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._regTBLTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._regTBLTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._salesTblTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._salesTblTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._suppliersTblTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._suppliersTblTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._categoryTblTableAdapter != null)) {
                    revertConnections.Add(this._categoryTblTableAdapter, this._categoryTblTableAdapter.Connection);
                    this._categoryTblTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._categoryTblTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._categoryTblTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._categoryTblTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._categoryTblTableAdapter.Adapter);
                    }
                }
                if ((this._customersTblTableAdapter != null)) {
                    revertConnections.Add(this._customersTblTableAdapter, this._customersTblTableAdapter.Connection);
                    this._customersTblTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._customersTblTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._customersTblTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._customersTblTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._customersTblTableAdapter.Adapter);
                    }
                }
                if ((this._productsTblTableAdapter != null)) {
                    revertConnections.Add(this._productsTblTableAdapter, this._productsTblTableAdapter.Connection);
                    this._productsTblTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._productsTblTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._productsTblTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._productsTblTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._productsTblTableAdapter.Adapter);
                    }
                }
                if ((this._purchasesTblTableAdapter != null)) {
                    revertConnections.Add(this._purchasesTblTableAdapter, this._purchasesTblTableAdapter.Connection);
                    this._purchasesTblTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._purchasesTblTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._purchasesTblTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._purchasesTblTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._purchasesTblTableAdapter.Adapter);
                    }
                }
                if ((this._regTBLTableAdapter != null)) {
                    revertConnections.Add(this._regTBLTableAdapter, this._regTBLTableAdapter.Connection);
                    this._regTBLTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._regTBLTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._regTBLTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._regTBLTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._regTBLTableAdapter.Adapter);
                    }
                }
                if ((this._salesTblTableAdapter != null)) {
                    revertConnections.Add(this._salesTblTableAdapter, this._salesTblTableAdapter.Connection);
                    this._salesTblTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._salesTblTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._salesTblTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._salesTblTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._salesTblTableAdapter.Adapter);
                    }
                }
                if ((this._suppliersTblTableAdapter != null)) {
                    revertConnections.Add(this._suppliersTblTableAdapter, this._suppliersTblTableAdapter.Connection);
                    this._suppliersTblTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._suppliersTblTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._suppliersTblTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._suppliersTblTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._suppliersTblTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._categoryTblTableAdapter != null)) {
                    this._categoryTblTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._categoryTblTableAdapter]));
                    this._categoryTblTableAdapter.Transaction = null;
                }
                if ((this._customersTblTableAdapter != null)) {
                    this._customersTblTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._customersTblTableAdapter]));
                    this._customersTblTableAdapter.Transaction = null;
                }
                if ((this._productsTblTableAdapter != null)) {
                    this._productsTblTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._productsTblTableAdapter]));
                    this._productsTblTableAdapter.Transaction = null;
                }
                if ((this._purchasesTblTableAdapter != null)) {
                    this._purchasesTblTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._purchasesTblTableAdapter]));
                    this._purchasesTblTableAdapter.Transaction = null;
                }
                if ((this._regTBLTableAdapter != null)) {
                    this._regTBLTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._regTBLTableAdapter]));
                    this._regTBLTableAdapter.Transaction = null;
                }
                if ((this._salesTblTableAdapter != null)) {
                    this._salesTblTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._salesTblTableAdapter]));
                    this._salesTblTableAdapter.Transaction = null;
                }
                if ((this._suppliersTblTableAdapter != null)) {
                    this._suppliersTblTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._suppliersTblTableAdapter]));
                    this._suppliersTblTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591